from simtk.openmm.app import *
from numpy.linalg import norm
from simtk.openmm import *
from simtk.unit import *
from sys import stdout
import pickle as pk
import numpy as np
import re
temp = 300
steps = 1000000000
pdb_freq = 10000
pdb = "system.pdb"  
parm = "system.parm7"
output_pdb = "system_output.pdb"
chk_filename = "system.chk"
init_pdb = PDBFile(pdb)
prmtop = AmberPrmtopFile(parm)
system = prmtop.createSystem(nonbondedMethod=PME,nonbondedCutoff=1*nanometer,constraints=HBonds)
integrator = LangevinIntegrator(temp*kelvin, 1/picosecond, 2*femtoseconds)
platform = Platform.getPlatformByName('CUDA')
properties = {'CudaDeviceIndex': '0', 'CudaPrecision': 'mixed'}
simulation = Simulation(prmtop.topology, system, integrator,platform,properties)
simulation.context.setPositions(init_pdb.positions)
simulation.context.setVelocitiesToTemperature(temp*kelvin)
last_frame = output_pdb[:-4] + '_last_frame.pdb'
simulation.reporters.append(PDBReporter(output_pdb,pdb_freq))
simulation.reporters.append(PDBReporter(last_frame,steps))
simulation.reporters.append(StateDataReporter(stdout,pdb_freq,step=True, time=True,potentialEnergy=True, totalSteps=steps,temperature=True,progress=True,remainingTime=True,speed=True, separator='\t'))
simulation.minimizeEnergy()
simulation.step(steps)
state = simulation.context.getState()
print(state.getPeriodicBoxVectors())
simulation_box_vectors = state.getPeriodicBoxVectors()
print(simulation_box_vectors)
with open('simulation_box_vectors.pkl', 'wb') as f:
    pk.dump(simulation_box_vectors, f)
simulation.saveCheckpoint(chk_filename)
print("Finished NVT Simulation")
